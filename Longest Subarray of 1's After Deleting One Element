*******QUESTION***********
Given a binary array nums, you should delete one element from it.

Return the size of the longest non-empty subarray containing only 1's in the resulting array.

Return 0 if there is no such subarray.

 

Example 1:

Input: nums = [1,1,0,1]
Output: 3
Explanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.
Example 2:

Input: nums = [0,1,1,1,0,1,1,0,1]
Output: 5
Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].
Example 3:

Input: nums = [1,1,1]
Output: 2
Explanation: You must delete one element.
Example 4:

Input: nums = [1,1,0,0,1,1,1,0,1]
Output: 4
Example 5:

Input: nums = [0,0,0]
Output: 0
*********************************
class Solution:
    def longestSubarray(self, nums: List[int]) -> int:
        if not 1 in nums:
            return 0
        if not 0 in nums:
            return len(nums)-1
        l = []
        count = 0
        for i in range(len(nums)):
            if nums[i]==0:
                l.append(i)
        m = 0
        if len(l)==1:
            return len(nums)-1
        for j in range(0,len(l)):
            if j==0:
                m = max(l[j]+l[j+1]-l[j]-1,m)
            elif j==len(l)-1:
                m = max(l[j]-l[j-1]-1+len(nums)-l[j]-1,m)
            else:
                m = max(l[j]-l[j-1]-1+l[j+1]-l[j]-1,m)
        return m
