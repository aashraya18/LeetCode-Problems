******QUESTION********
Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies:

Si % Sj = 0 or Sj % Si = 0.

If there are multiple solutions, return any subset is fine.

Example 1:

Input: [1,2,3]
Output: [1,2] (of course, [1,3] will also be ok)
Example 2:

Input: [1,2,4,8]
Output: [1,2,4,8]
**********************
class Solution:
    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:
        if len(nums)==0:
            return []
        l = []
        counts = [1 for i in range(len(nums))]
        nums = sorted(nums)
        for j in range(1,len(nums)):
            for k in range(j-1,-1,-1):
                if nums[j]%nums[k]==0:
                    counts[j] = max(counts[j],counts[k]+1)
        maxindex = counts.index(max(counts))
        current = counts[maxindex]
        for h in range(maxindex,-1,-1):
            if nums[maxindex]%nums[h]==0 and counts[h]==current:
                l.append(nums[h])
                maxindex = h
                current -= 1
        return l
